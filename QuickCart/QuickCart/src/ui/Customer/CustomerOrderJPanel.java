/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Customer;

import business.Customer.FoodItemOrder;
import business.Customer.GroceryItemOrder;
import business.Customer.ItemOrder;
import business.Enterprise.Enterprise.EnterpriseType;
import business.Enterprise.GroceryEnterprise;
import business.Enterprise.RestaurantEnterprise;
import business.Item.FoodItem;
import business.Item.GroceryItem;
import business.Network.Network;
import business.UserAccount.CustomerAccount;
import business.UserAccount.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author SAI SRIDHAR
 */
public class CustomerOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerOrderJPanel
     */
    Network network;
    CustomerAccount account;
    EnterpriseType type;
    RestaurantEnterprise restaurant;
    GroceryEnterprise grocery;
    public CustomerOrderJPanel(Network network, CustomerAccount account) {
        initComponents();
        this.revalidate();
    this.repaint();
        this.network = network;
        this.account = account;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStores = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMenu = new javax.swing.JTable();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();

        setBackground(new java.awt.Color(255, 255, 102));

        tblStores.setFont(new java.awt.Font("Bahnschrift", 0, 15)); // NOI18N
        tblStores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Outlet", "Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblStores);

        tblMenu.setFont(new java.awt.Font("Bahnschrift", 0, 15)); // NOI18N
        tblMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Item", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblMenu);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Bahnschrift", 0, 17)); // NOI18N
        jRadioButton1.setText("Restaurants");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Bahnschrift", 0, 17)); // NOI18N
        jRadioButton2.setText("Grocery Stores");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Bahnschrift", 0, 17)); // NOI18N
        jButton1.setText("Add to Cart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        quantitySpinner.setFont(new java.awt.Font("Segoe UI", 0, 17)); // NOI18N
        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(317, 317, 317)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton2)
                .addGap(302, 302, 302))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        if(jRadioButton2.isSelected()){
            type = EnterpriseType.Grocery;
            DefaultTableModel dtm = (DefaultTableModel) tblStores.getModel();
            dtm.setRowCount(0);
            System.out.println(network);
            System.out.println(network.getEnterpriseDirectory().getGrocery().getGroceryList());
            
            for (GroceryEnterprise res : network.getEnterpriseDirectory().getGrocery().getGroceryList()) {
                Object row[] = new Object[2];
                row[0] = res;
                row[1] = String.format("%.1f", res.getAverageRating());
                dtm.addRow(row);
            }
        }
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        if(jRadioButton1.isSelected()){
            type = EnterpriseType.Restaurant;
            DefaultTableModel dtm = (DefaultTableModel) tblStores.getModel();
            dtm.setRowCount(0);
            System.out.println(network);
            System.out.println(network.getEnterpriseDirectory().getRestaurants().getRestaurantList());
            
            for (RestaurantEnterprise res : network.getEnterpriseDirectory().getRestaurants().getRestaurantList()) {
                Object row[] = new Object[2];
                row[0] = res;
                row[1] = String.format("%.1f", res.getAverageRating());
                dtm.addRow(row);
            }
        }
        
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void tblStoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStoresMouseClicked
        // TODO add your handling code here:
        int index = tblStores.getSelectedRow();
        TableModel model = tblStores.getModel();

    DefaultTableModel dtm = (DefaultTableModel) tblMenu.getModel();
    dtm.setRowCount(0); // Clear menu table

    if (type == EnterpriseType.Restaurant) {
        // Get the selected restaurant
        restaurant = (RestaurantEnterprise) model.getValueAt(index, 0);

        // Populate menu table with restaurant items
        for (FoodItem item : restaurant.getMenu().getMenu()) {
            Object row[] = new Object[2];
            row[0] = item; // Food item name
            row[1] = item.getPrice(); // Food item price
            dtm.addRow(row);
        }
    } else if (type == EnterpriseType.Grocery) {
        // Get the selected grocery store
        grocery = (GroceryEnterprise) model.getValueAt(index, 0);

        // Populate menu table with grocery items
        for (GroceryItem item : grocery.getGroceryCatalog().getGroceryCatalog()) {
            Object row[] = new Object[2];
            row[0] = item; // Grocery item name
            row[1] = item.getPrice(); // Grocery item price
            dtm.addRow(row);
        }
    }
        
        
        
    }//GEN-LAST:event_tblStoresMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       int selectedRow = tblMenu.getSelectedRow();

        if (selectedRow >= 0) {
            int quantity = (int) quantitySpinner.getValue();
            ItemOrder line = null;

            if (this.type.equals(EnterpriseType.Restaurant)) {
                FoodItem item = (FoodItem) tblMenu.getValueAt(selectedRow, 0);

                line = new FoodItemOrder(this.restaurant, item, quantity);

                if (!this.account.getCart().isCartEmpty()) {
                    for (ItemOrder or : this.account.getCart().getItemList()) {
                        if (!or.getShopModel().equals(this.restaurant)) {
                            int choice = JOptionPane.showConfirmDialog(null,
                                    "You already have items from another restaurant in the shopping cart. \n"
                                            + "Adding this item will remove all previous items in the shopping cart.\n"
                                            + "Do you want to continue?",
                                    "Restaurant Conflict", JOptionPane.YES_NO_OPTION);

                            if (choice == JOptionPane.YES_OPTION) {
                                this.account.getCart().clearCart();
                                break;
                            } else {
                                return;
                            }
                        }
                        if (or.getShopModel().equals(this.restaurant) && or.getItem().equals(item)) {
                            line.setQuantity(or.getQuantity() + quantity);
                            this.account.getCart().getItemList().remove(or);
                            break;
                        }
                    }
                }

            } else if (this.type.equals(EnterpriseType.Grocery)) {
                GroceryItem item = (GroceryItem) tblMenu.getValueAt(selectedRow, 0);

                line = new GroceryItemOrder(this.grocery, item, quantity);

                if (!this.account.getCart().isCartEmpty()) {
                    for (ItemOrder or : this.account.getCart().getItemList()) {
                        if (!or.getShopModel().equals(this.grocery)) {
                            int choice = JOptionPane.showConfirmDialog(null,
                                    "You already have items from another grocery store in the shopping cart. \n"
                                            + "Adding this item will remove all previous items in the shopping cart.\n"
                                            + "Do you want to continue?",
                                    "Grocery Conflict", JOptionPane.YES_NO_OPTION);

                            if (choice == JOptionPane.YES_OPTION) {
                                this.account.getCart().clearCart();
                                break;
                            } else {
                                return;
                            }
                        }
                        if (or.getShopModel().equals(this.grocery) && or.getItem().equals(item)) {
                            line.setQuantity(or.getQuantity() + quantity);
                            this.account.getCart().getItemList().remove(or);
                            break;
                        }
                    }
                }
            }

            if (line != null) {
                this.account.getCart().addToCart(line);
                JOptionPane.showMessageDialog(null, "Item has been successfully added to Shopping Cart.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an item.");
        }

    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTable tblMenu;
    private javax.swing.JTable tblStores;
    // End of variables declaration//GEN-END:variables
}
